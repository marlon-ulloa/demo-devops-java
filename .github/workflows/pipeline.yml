name: Pipeline

#Se configura el cuando ejecutar
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
##Defino los jobs a ejecutarse
jobs:
  ##Construye el proyecto
  build:
    runs-on: ubuntu-latest
    container:
      image: amazoncorretto:17-alpine
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # instalacion de Maven
      - name: Install Maven
        run: apk add --no-cache maven
      # COmpilacion del proyecto
      - name: Build with JDK 17
        run: mvn clean package -DskipTests

      # Cargar el directorio compilado como un artefacto
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: target-directory
          path: target/demo*.jar

  #job de pruebas unitarias
  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: amazoncorretto:17-alpine
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # instalacion de Maven
      - name: Install Maven
        run: apk add --no-cache maven
      # Ejecuta las pruebas unitarias
      - name: Unit Tests
        run: mvn clean test

  # Analisis de Codigo
  static-code-analysis:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: amazoncorretto:17-alpine
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # instalacion de Maven
      - name: Install Maven
        run: apk add --no-cache maven
      # Ejecuta las pruebas unitarias
      - name: Static Code Analysis
        run: mvn spotbugs:spotbugs

  # Cobertura de Codigo
  code-coverage:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: amazoncorretto:17-alpine
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # instalacion de Maven
      - name: Install Maven
        run: apk add --no-cache maven
      # Ejecuta las pruebas unitarias y genera el reporte de cobertura de codigo
      - name: Generate Code coverage report
        run: mvn test jacoco:report
      #Subir el reporte de cobertura
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: target/jacoco-report/index.html

  # Docker build y push
  docker-build-push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # Descargar el artefacto construido
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: target-directory

      - name: Ensure Target Directory Exists
        run: |
            mkdir -p target
            ls -la
            cp demo*.jar target
            ls -la target

      # Iniciar Sesion en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -f Container/Dockerfile -t kike21/pruebadevsu:latest .

      # Subir la imagen Docker a Docker Hub
      - name: Push Docker image
        run: |
          docker push kike21/pruebadevsu:latest

  # Escaneo de vulnerabilidades
  vulnerability-scan:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      # Se hace pull de la imagen docker
      - name: Pull Docker Image
        run: docker pull kike21/pruebadevsu:latest

      # Escaneo de la imagen docker
      - name: Scan Docker Image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: kike21/pruebadevsu:latest

  # Deploy
  deploy-kubernetes:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar AWS CLI y autenticar
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Configurar kubeconfig para EKS
      - name: Set up kubectl for EKS
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}

      # 4. Aplicar ConfigMap
      - name: Apply ConfigMap
        run: kubectl apply -f Container/kubernetes/configmap.yaml --namespace=pruebadevsu

      # 5. Aplicar Secret
      - name: Apply Secret
        run: kubectl apply -f Container/kubernetes/secret.yaml --namespace=pruebadevsu

      # 6. Aplicar Deployment
      - name: Apply Deployment
        run: kubectl apply -f Container/kubernetes/deployment.yaml --namespace=pruebadevsu

      # 7. Aplicar Service
      - name: Apply Service
        run: kubectl apply -f Container/kubernetes/service.yaml --namespace=pruebadevsu

      # 8. Aplicar Ingress
      - name: Apply Ingress
        run: kubectl apply -f Container/kubernetes/ingress.yaml --namespace=pruebadevsu
